@page "/projectInfo/{projectId}"
@using ProjectManagement.Client.Services
@using ProjectManagement.Shared.Entity
@using TabBlazor
@using MatBlazor
@using System
@using System.Collections.Generic
@using TabBlazor.Services
@using Blazorise
@inject NavigationManager navigate
@using ApexCharts
@inject HttpClient client
@inject CustomStateProvider authStateProvider

<TabBlazor.Tabs>
    <TabBlazor.Tab Title="Главная" Icon="home">
        <div class="container">
            @if (CurrentProject is not null)
            {
                <div class="row">
                    <div class="col-md-12 text-center">
                        <h3>Информация о проекте</h3>
                        <p>Название проекта: @CurrentProject.Project.Name</p>
                        <p>Описание проекта: @CurrentProject.Project.Description</p>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <h3>Информация о заданиях</h3>
                        <p>Количество заданий: @CurrentProject.ProjectTaskUsers.Count()</p>


                        @if (CurrentProject.ProjectTaskUsers.Any())
                        {
                            <h3>Список Задач:</h3>
                            <ul>
                                @foreach (var projectTask in CurrentProject.ProjectTaskUsers.Select(pt => pt.ProjectTask))
                                {
                                    <li @onclick="() => ProjectTaskClick(projectTask.Id)">@projectTask.Name - @projectTask.Description</li>
                                }
                            </ul>
                        }
                    </div>
                    <div class="col-md-6">
                        <h3>Календарь</h3>

                        <TabBlazor.Datepicker @bind-SelectedDate="SelectedDate" Label="Выберите дату" />
                        <TabBlazor.Button class="btn-primary" @onclick="OnSelectedDateChanged"></TabBlazor.Button>

                        @if (SelectedDateTasks != null && SelectedDateTasks.Any())
                        {
                            <h4>Задания на @SelectedDate.ToString("d"):</h4>
                            <ul>
                                @foreach (var task in SelectedDateTasks)
                                {
                                    <li @onclick="() => ProjectTaskClick(task.Id)">@task.Name</li>
                                }
                            </ul>
                        }
                        else
                        {
                            <p>На @SelectedDate.ToString("d") заданий нет.</p>
                        }
                    </div>
                </div>
                @if (CurrentProject.ProjectTaskUsers is not null)
                {
                    <div class="row">
                        <div class="col-md-6">
                            <h3>Графики</h3>
                            <div class="row">
                                <div class="col-md-8">

                                    <ApexChart @ref=chart TItem="ProjectTask"
                                               Title="ProjectTask Status Distribution" Debug>

                                     <ApexPointSeries TItem="ProjectTask"
                                                      Items="CurrentProject.ProjectTaskUsers.Select(pt => pt.ProjectTask)"
                                                      Name="ProjectTask Status"
                                                      SeriesType="SeriesType.Donut"
                                                      XValue="@(e => e.Status)"
                                                      YAggregate="@(e => e.Count())"
                                                      OrderByDescending="@(e=>e.Y)"
                                                      PointColor="@(e=> GetPointColor(e))" ShowDataLabels />
                                     </ApexChart>

                                 </div>
                             </div>
                         </div>
                         <div class="col-md-6">
                             <!-- Список участников заданий -->
                             <h3>Участники заданий</h3>
                             <ul>
                                 @* <div class="btn btn-primary text-center" @onclick="GetAssignedUsers">Получить участников проекта</div> *@
                                 @if (CurrentProject.AssignedUsers.Any())
                                {
                                    <h3>Участники проекта:</h3>
                                    <ul>
                                        @foreach (var user in CurrentProject.AssignedUsers)
                                        {
                                            <li>@user.UserName - @user.Position</li>
                                        }
                                    </ul>
                                }

                                else
                                {
                                    <p>Участников проекта не найдено.</p>
                                }
                                @if (CurrentProject.Creatorname == userName)
                                {
                                    <div class="btn btn-primary" @onclick="ShowEditModal">Редактировать участников</div>
                                }
                                <Blazorise.Modal @ref="editModalRef" Closing="OnModalClosing">
                                    <Blazorise.ModalContent Centered>
                                     <Blazorise.ModalHeader>
                                         <ModalTitle>Редактировать участников</ModalTitle>
                                         <CloseButton />
                                     </Blazorise.ModalHeader>
                                     <Blazorise.ModalBody>
                                         <div class="form-group">
                                             <label>Участники проекта:</label>
                                             <ul class="list-group">
                                                 @foreach (var user in CurrentProject.AssignedUsers)
                                                    {
                                                        <li class="list-group-item">
                                                            @user.UserName
                                                            @if (user.UserName == userName)
                                                            {
                                                                <button class="btn btn-secondary btn-sm float-right">Создатель</button>
                                                            }
                                                            else
                                                            {
                                                                <button class="btn btn-danger btn-sm float-right" @onclick="() => RemoveProjectUser(user)">Удалить</button>
                                                            }
                                                        </li>
                                                    }
                                                </ul>
                                            </div>
                                            <hr />
                                            <div class="form-group">
                                                <label>Добавить новых участников:</label>
                                                <Blazorise.TextEdit Placeholder="Search by name or surname..." Text=@searchText TextChanged="SearchByUsernameForProject" />
                                                @if (users != null)
                                                {
                                                    <ul class="list-group">
                                                        @foreach (var user in users)
                                                        {
                                                            <li class="list-group-item">
                                                                @user.UserName
                                                                <button class="btn btn-primary btn-sm float-right" @onclick="() => AddProjectUser(user)">Добавить</button>
                                                            </li>
                                                        }
                                                    </ul>
                                                }
                                            </div>
                                        </Blazorise.ModalBody>
                                        <ModalFooter>
                                            <Blazorise.Button Color="Blazorise.Color.Secondary" Clicked="@HideEditModal">Отмена</Blazorise.Button>
                                            @if (!string.IsNullOrWhiteSpace(errorMessageUsersProject))
                                            {
                                                <div class="alert alert-danger" role="alert">
                                                    @errorMessageUsersProject
                                                </div>
                                            }
                                            <Blazorise.Button Color="Blazorise.Color.Primary" Clicked="@SaveParticipantsChanges">Сохранить изменения</Blazorise.Button>

                                        </ModalFooter>
                                    </Blazorise.ModalContent>
                                </Blazorise.Modal>

                            </ul>
                        </div>
                    </div>

                }
            }
        </div>

    </TabBlazor.Tab>
    <TabBlazor.Tab Title="Список задач" Icon="other-icon">

        @if (CurrentProject.Creatorname == userName)
        {
            <Blazorise.Button Color="Blazorise.Color.Success" Clicked="@ShowModal">Create task</Blazorise.Button>
            <Blazorise.Modal @ref="modalRef" Closing="OnModalClosing">
                <Blazorise.ModalContent Centered>
                 <Blazorise.ModalHeader>
                     <ModalTitle>Create Task</ModalTitle>
                     <CloseButton />
                 </Blazorise.ModalHeader>
                 <Blazorise.ModalBody>
                     <Blazorise.Field>
                         <FieldLabel>Name</FieldLabel>
                         <TextEdit Placeholder="Enter task name..." @bind-Text="newProjectTask.Name" />
                     </Blazorise.Field>
                     <Blazorise.Field>
                         <FieldLabel>Description</FieldLabel>
                         <TextEdit Placeholder="Enter task description..." @bind-Text="newProjectTask.Description" />
                     </Blazorise.Field>

                     <Blazorise.Field>
                         <Blazorise.FieldLabel>Search</Blazorise.FieldLabel>
                         <Blazorise.TextEdit Placeholder="Search by name or surname..." Text=@searchText TextChanged=GetUsersSearch />
                     </Blazorise.Field>

                     @if (users != null)
                        {
                            <div class="search-results">
                                @foreach (var user in users)
                                {
                                    <div class="search-result" @onclick="() => AddUser(user)">
                                        @user.UserName
                                    </div>
                                }
                            </div>
                        }
                        @foreach (var user in selectedUsers)
                        {
                            @if (selectedUsers.Any())
                            {
                                <div>
                                    <h4>Selected User:</h4>
                                    <div>
                                        <p>@selectedUsers.FirstOrDefault()?.UserName</p>
                                        <button class="btn btn-danger btn-sm float-right" @onclick="() => ClearSelectedUser(user)">Удалить</button>
                                    </div>
                                </div>
                            }
                        }

                    </Blazorise.ModalBody>
                    <ModalFooter>
                        <Blazorise.Button Color="Blazorise.Color.Secondary" Clicked="@HideModal">Close</Blazorise.Button>
                        @if (!string.IsNullOrWhiteSpace(errorMessage))
                        {
                            <div class="alert alert-danger" role="alert">
                                @errorMessage
                            </div>
                        }
                        <Blazorise.Button Color="Blazorise.Color.Primary" Clicked="@CreateProjectTask">Save Changes</Blazorise.Button>
                    </ModalFooter>
                </Blazorise.ModalContent>
            </Blazorise.Modal>
        }

        <div class="container">
            <h3>Список задач</h3>

            @if (CurrentProject.ProjectTaskUsers.Any())
            {

                <div class="d-flex">
                    <div class="col-md-4 col-sm-12 me-3">
                        <h3 class="text-danger">Uncompleted</h3>
                        @foreach (var model in CurrentProject.ProjectTaskUsers)
                        {
                            @if (model.ProjectTask.Status == "Uncompleted")
                            {

                                <div class="card card-sm mb-3">
                                    <div class="card-status-top bg-danger"></div>
                                    <div class="card-body">
                                        <div class="d-flex">
                                            <h3 class="card-title fw-bold">@model.ProjectTask.Name</h3>
                                            @if (CurrentProject.Creatorname == userName)
                                            {
                                                <svg @onclick="() => OpenEditTaskModal(model)" fill="#000000" height="2.5ex" width="2.5ex" version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
                                                     viewBox="0 0 348.882 348.882" xml:space="preserve" class="ms-2 edit-uncompleted">
                                                <g>
                                                <path d="M333.988,11.758l-0.42-0.383C325.538,4.04,315.129,0,304.258,0c-12.187,0-23.888,5.159-32.104,14.153L116.803,184.231
		c-1.416,1.55-2.49,3.379-3.154,5.37l-18.267,54.762c-2.112,6.331-1.052,13.333,2.835,18.729c3.918,5.438,10.23,8.685,16.886,8.685
		c0,0,0.001,0,0.001,0c2.879,0,5.693-0.592,8.362-1.76l52.89-23.138c1.923-0.841,3.648-2.076,5.063-3.626L336.771,73.176
		C352.937,55.479,351.69,27.929,333.988,11.758z M130.381,234.247l10.719-32.134l0.904-0.99l20.316,18.556l-0.904,0.99
		L130.381,234.247z M314.621,52.943L182.553,197.53l-20.316-18.556L294.305,34.386c2.583-2.828,6.118-4.386,9.954-4.386
		c3.365,0,6.588,1.252,9.082,3.53l0.419,0.383C319.244,38.922,319.63,47.459,314.621,52.943z" />
                                                <path d="M303.85,138.388c-8.284,0-15,6.716-15,15v127.347c0,21.034-17.113,38.147-38.147,38.147H68.904
		c-21.035,0-38.147-17.113-38.147-38.147V100.413c0-21.034,17.113-38.147,38.147-38.147h131.587c8.284,0,15-6.716,15-15
		s-6.716-15-15-15H68.904c-37.577,0-68.147,30.571-68.147,68.147v180.321c0,37.576,30.571,68.147,68.147,68.147h181.798
		c37.576,0,68.147-30.571,68.147-68.147V153.388C318.85,145.104,312.134,138.388,303.85,138.388z" />
                                                                    </g>
                                                                </svg>
                                            }
                                        </div>
                                        <div class="text-secondary">@model.ProjectTask.Description</div>
                                        <div class="mt-4">
                                            <div class="row">
                                                <div class="col">
                                                    <div class="avatar-list avatar-list-stacked">
                                                        <span class="avatar avatar-xs rounded">@model.AssignedUser.UserName[0..1]</span>
                                                    </div>
                                                </div>
                                                <div class="col-auto">
                                                    <!-- Download SVG icon from http://tabler-icons.io/i/calendar -->
                                                    <svg xmlns="http://www.w3.org/2000/svg" class="icon text-orange" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M4 7a2 2 0 0 1 2 -2h12a2 2 0 0 1 2 2v12a2 2 0 0 1 -2 2h-12a2 2 0 0 1 -2 -2v-12z"></path><path d="M16 3v4"></path><path d="M8 3v4"></path><path d="M4 11h16"></path><path d="M11 15h1"></path><path d="M12 15v3"></path></svg>
                                                    <span class="text-orange">@model.ProjectTask.CompletedAt?.ToString("yyyy-MM-dd")</span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                    <div class="col-md-4 col-sm-12 me-3">
                        <h3 class="text-warning">InProgress</h3>
                        @foreach (var model in CurrentProject.ProjectTaskUsers)
                        {
                            @if (model.ProjectTask.Status == "InProgress")
                            {
                                <div class="card card-sm mb-3">
                                    <div class="card-status-top bg-warning"></div>
                                    <div class="card-body">
                                        <div class="d-flex">
                                            <h3 class="card-title fw-bold">@model.ProjectTask.Name</h3>
                                            @if (CurrentProject.Creatorname == userName)
                                            {
                                                <svg @onclick="() => OpenEditTaskModal(model)" fill="#000000" height="2.5ex" width="2.5ex" version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
                                                     viewBox="0 0 348.882 348.882" xml:space="preserve" class="ms-2 edit-inprogress">
                                                <g>
                                                <path d="M333.988,11.758l-0.42-0.383C325.538,4.04,315.129,0,304.258,0c-12.187,0-23.888,5.159-32.104,14.153L116.803,184.231
		c-1.416,1.55-2.49,3.379-3.154,5.37l-18.267,54.762c-2.112,6.331-1.052,13.333,2.835,18.729c3.918,5.438,10.23,8.685,16.886,8.685
		c0,0,0.001,0,0.001,0c2.879,0,5.693-0.592,8.362-1.76l52.89-23.138c1.923-0.841,3.648-2.076,5.063-3.626L336.771,73.176
		C352.937,55.479,351.69,27.929,333.988,11.758z M130.381,234.247l10.719-32.134l0.904-0.99l20.316,18.556l-0.904,0.99
		L130.381,234.247z M314.621,52.943L182.553,197.53l-20.316-18.556L294.305,34.386c2.583-2.828,6.118-4.386,9.954-4.386
		c3.365,0,6.588,1.252,9.082,3.53l0.419,0.383C319.244,38.922,319.63,47.459,314.621,52.943z" />
                                                <path d="M303.85,138.388c-8.284,0-15,6.716-15,15v127.347c0,21.034-17.113,38.147-38.147,38.147H68.904
		c-21.035,0-38.147-17.113-38.147-38.147V100.413c0-21.034,17.113-38.147,38.147-38.147h131.587c8.284,0,15-6.716,15-15
		s-6.716-15-15-15H68.904c-37.577,0-68.147,30.571-68.147,68.147v180.321c0,37.576,30.571,68.147,68.147,68.147h181.798
		c37.576,0,68.147-30.571,68.147-68.147V153.388C318.85,145.104,312.134,138.388,303.85,138.388z" />
                                                                    </g>
                                                                </svg>
                                            }
                                        </div>
                                        <div class="text-secondary">@model.ProjectTask.Description</div>
                                        <div class="mt-4">
                                            <div class="row">
                                                <div class="col">
                                                    <div class="avatar-list avatar-list-stacked">
                                                        <span class="avatar avatar-xs rounded">@model.AssignedUser.UserName[0..1]</span>
                                                    </div>
                                                </div>
                                                <div class="col-auto">
                                                    <!-- Download SVG icon from http://tabler-icons.io/i/calendar -->
                                                    <svg xmlns="http://www.w3.org/2000/svg" class="icon text-orange" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M4 7a2 2 0 0 1 2 -2h12a2 2 0 0 1 2 2v12a2 2 0 0 1 -2 2h-12a2 2 0 0 1 -2 -2v-12z"></path><path d="M16 3v4"></path><path d="M8 3v4"></path><path d="M4 11h16"></path><path d="M11 15h1"></path><path d="M12 15v3"></path></svg>
                                                    <span class="text-orange">@model.ProjectTask.CompletedAt?.ToString("yyyy-MM-dd")</span>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                    <div class="col-md-4 col-sm-12">
                        <h3 class="text-success">Completed</h3>
                        @foreach (var model in CurrentProject.ProjectTaskUsers)
                        {
                            @if (model.ProjectTask.Status == "Completed")
                            {

                                <div class="card card-sm mb-3">
                                    <div class="card-status-top bg-success"></div>
                                    <div class="card-body">
                                        <div class="d-flex">
                                            <h3 class="card-title fw-bold">@model.ProjectTask.Name</h3>
                                            @if (CurrentProject.Creatorname == userName)
                                            {
                                                <svg @onclick="() => OpenEditTaskModal(model)" fill="#000000" height="2.5ex" width="2.5ex" version="1.1" id="Capa_1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"
                                                     viewBox="0 0 348.882 348.882" xml:space="preserve" class="ms-2 edit-completed">
                                                <g>
                                                <path d="M333.988,11.758l-0.42-0.383C325.538,4.04,315.129,0,304.258,0c-12.187,0-23.888,5.159-32.104,14.153L116.803,184.231
		c-1.416,1.55-2.49,3.379-3.154,5.37l-18.267,54.762c-2.112,6.331-1.052,13.333,2.835,18.729c3.918,5.438,10.23,8.685,16.886,8.685
		c0,0,0.001,0,0.001,0c2.879,0,5.693-0.592,8.362-1.76l52.89-23.138c1.923-0.841,3.648-2.076,5.063-3.626L336.771,73.176
		C352.937,55.479,351.69,27.929,333.988,11.758z M130.381,234.247l10.719-32.134l0.904-0.99l20.316,18.556l-0.904,0.99
		L130.381,234.247z M314.621,52.943L182.553,197.53l-20.316-18.556L294.305,34.386c2.583-2.828,6.118-4.386,9.954-4.386
		c3.365,0,6.588,1.252,9.082,3.53l0.419,0.383C319.244,38.922,319.63,47.459,314.621,52.943z" />
                                                <path d="M303.85,138.388c-8.284,0-15,6.716-15,15v127.347c0,21.034-17.113,38.147-38.147,38.147H68.904
		c-21.035,0-38.147-17.113-38.147-38.147V100.413c0-21.034,17.113-38.147,38.147-38.147h131.587c8.284,0,15-6.716,15-15
		s-6.716-15-15-15H68.904c-37.577,0-68.147,30.571-68.147,68.147v180.321c0,37.576,30.571,68.147,68.147,68.147h181.798
		c37.576,0,68.147-30.571,68.147-68.147V153.388C318.85,145.104,312.134,138.388,303.85,138.388z" />
                                                                    </g>
                                                                </svg>
                                            }
                                        </div>
                                        <div class="text-secondary">@model.ProjectTask.Description</div>
                                        <div class="mt-4">
                                            <div class="row">
                                                <div class="col">
                                                    <div class="avatar-list avatar-list-stacked">
                                                        <span class="avatar avatar-xs rounded">@model.AssignedUser.UserName[0..1]</span>
                                                    </div>
                                                </div>
                                                <div class="col-auto">
                                                    <!-- Download SVG icon from http://tabler-icons.io/i/calendar -->
                                                    <svg xmlns="http://www.w3.org/2000/svg" class="icon text-orange" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round"><path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M4 7a2 2 0 0 1 2 -2h12a2 2 0 0 1 2 2v12a2 2 0 0 1 -2 2h-12a2 2 0 0 1 -2 -2v-12z"></path><path d="M16 3v4"></path><path d="M8 3v4"></path><path d="M4 11h16"></path><path d="M11 15h1"></path><path d="M12 15v3"></path></svg>
                                                    <span class="text-orange">@model.ProjectTask.CompletedAt?.ToString("yyyy-MM-dd")</span>
                                                </div>

                                            </div>
                                        </div>
                                    </div>
                                </div>
                            }
                        }
                    </div>
                </div>
            }

            else
            {
                <p>Задачи отсутствуют.</p>
            }
        </div>

    </TabBlazor.Tab>


    <Blazorise.Modal @ref="editTaskModalRef">
        <Blazorise.ModalContent>
            <Blazorise.ModalHeader>
                <Blazorise.ModalTitle>Edit Task</Blazorise.ModalTitle>
                <Blazorise.CloseButton @onclick="HideEditTaskModal" />
            </Blazorise.ModalHeader>
            <Blazorise.ModalBody>
                @if (selectedTask is not null)
                {

                    <div class="form-group">
                        <label for="taskName">Name</label>
                        <input type="text" class="form-control" id="taskName" @bind="selectedTask.ProjectTask.Name" />
                    </div>
                    <div class="form-group">
                        <label for="taskDescription">Description</label>
                        <textarea class="form-control" id="taskDescription" @bind="selectedTask.ProjectTask.Description"></textarea>
                    </div>
                    <div class="form-group">
                        <label for="taskStatus">Status</label>
                        <select class="form-control" id="taskStatus" @bind="selectedTask.ProjectTask.Status">
                            <option value="Completed">Сompleted</option>
                            <option value="InProgress">InProgress</option>
                            <option value="Uncompleted">Uncompleted</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label for="taskDueDate">CreatedAt</label>
                        <input type="date" class="form-control" id="CreatedAt" @bind="selectedTask.ProjectTask.CreatedAt" />
                    </div>
                    <div class="form-group">
                        <label for="taskCompletedAt">CompletedAt</label>
                        <input type="date" class="form-control" id="CompletedAt" @bind="selectedTask.ProjectTask.CompletedAt" />
                    </div>
                    <div class="form-group">

                        <Blazorise.Button Class="mb-2 mt-2" Color="Blazorise.Color.Danger" Size="Blazorise.Size.Small" Clicked="() => DeleteProjectTask(selectedTask.ProjectTask.Id)">Delete task</Blazorise.Button>
                    </div>
                    <h5>Назначенные пользователи</h5>
                    <li class="list-group-item">
                        @selectedTask.AssignedUser.UserName

                    </li>
                    <label>Изменить отвественного пользователя:</label>
                    <Blazorise.TextEdit Placeholder="Search by name or surname..." Text=@searchText TextChanged="GetUsersSearch" />
                    @if (users != null)
                    {
                        <ul class="list-group">
                            @foreach (var user in users)
                            {
                                <li class="list-group-item">
                                    @user.UserName
                                    <button class="btn btn-primary btn-sm float-right" @onclick="() => ChangeTaskUser(user)">Добавить</button>
                                </li>
                            }
                        </ul>
                    }
                }
            </Blazorise.ModalBody>
            <Blazorise.ModalFooter>
                <Blazorise.Button Color="Blazorise.Color.Primary" @onclick="SaveTaskChanges">Save Changes</Blazorise.Button>
                @if (!string.IsNullOrWhiteSpace(errorMessageEditingTasks))
                {
                    <div class="alert alert-danger" role="alert">
                        @errorMessageEditingTasks
                    </div>
                }
                <Blazorise.Button Color="Blazorise.Color.Secondary" @onclick="HideEditTaskModal">Close</Blazorise.Button>
            </Blazorise.ModalFooter>
        </Blazorise.ModalContent>
    </Blazorise.Modal>






</TabBlazor.Tabs>

@code {
    public ProjectInfoViewModel CurrentProject { get; set; } = default!;
    [Parameter]
    public string projectId { get; set; }

    private List<ProjectTask> SelectedDateTasks { get; set; } = new List<ProjectTask>();

    private DateTime SelectedDate { get; set; } = DateTime.UtcNow.ToLocalTime();

    private ApexChart<ProjectTask> chart = default!;

    string userName;


    private List<User> users;

    private List<User> selectedUsers = new List<User>();

    private ProjectTask newProjectTask = new ProjectTask();

    private string searchText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        SelectedDate = DateTime.Today;

        await Refresh();


    }

    private async Task Refresh()
    {
        userName = (await authStateProvider.GetAuthenticationStateAsync()).User.Identity.Name;

        CurrentProject = await client.GetFromJsonAsync<ProjectInfoViewModel>($"api/project/GetProjectInfoViewModel?projectId={projectId}");
        await UpdateTasksForSelectedDate();
        selectedUsers.Clear();
        searchText = "";
        users = null;
        StateHasChanged();
    }

    private async Task OnSelectedDateChanged() => await UpdateTasksForSelectedDate();

    private async Task UpdateTasksForSelectedDate()
    {
        try
        {

            string formattedDate = SelectedDate.ToString("yyyy-MM-ddTHH:mm:ssZ");


            SelectedDateTasks = await client.GetFromJsonAsync<List<ProjectTask>>($"api/project/GetProjectTasksByDate?projectId={projectId}&date={formattedDate}");
        }
        catch (Exception ex)
        {

            Console.WriteLine($"Ошибка при получении заданий для даты: {ex.Message}");
        }
    }

    private string GetPointColor(ProjectTask projectTask)
    {
        switch (projectTask.Status)
        {
            case "Completed":
                return "#00783c";
            case "InProgress":
                return "#1a65d5";
            case "Uncompleted":
                return "#e3001b";
            default:
                return "#87775d";
        }
    }
    private async Task ChangeProjectTaskStatus(ProjectTask projectTask, string status)
    {
        projectTask.Status = status;

        await client.PutAsJsonAsync("api/ProjectTask/UpdateProjectTaskStatus", projectTask);
    }


    private async Task GetUsersSearch(string value)
    {
        searchText = value;
        if (!string.IsNullOrWhiteSpace(searchText))
        {

            users = await client.GetFromJsonAsync<List<User>>($"api/projectTask/SearchUsersInProject?projectId={projectId}&username={searchText}");

        }
        else
        {
            users = null;
            selectedUsers = new List<User>();
        }
    }

    private void ClearFields()
    {
        newProjectTask.Name = string.Empty;
        newProjectTask.Description = string.Empty;
    }
    private string errorMessage = string.Empty;

    private string errorMessageUsersProject = string.Empty;

    private string errorMessageEditingTasks = string.Empty;
    private async Task CreateProjectTask()
    {

        var newProjectTask = new ProjectTask()
            {
                Name = this.newProjectTask.Name,
                Description = this.newProjectTask.Description,
                Status = "Uncompleted",
                ProjectId = new Guid(projectId)
            };

        if (string.IsNullOrWhiteSpace(newProjectTask.Name))
        {
            errorMessage = "Необходимо заполнить поле 'Name'.";
            return;
        }

        if (string.IsNullOrWhiteSpace(newProjectTask.Description))
        {
            errorMessage = "Необходимо заполнить поле 'Description'.";
            return;
        }

        if (!selectedUsers.Any())
        {
            errorMessage = "Необходимо выбрать хотя бы одного назначенного пользователя.";
            return;
        }

        var taskAssignees = new List<TaskAssignee>();
        foreach (var user in selectedUsers)
        {
            taskAssignees.Add(new TaskAssignee()
                {
                    UserId = user.Id,
                    ProjectTaskId = newProjectTask.Id
                });
        }

        var taskAssigneeModel = new TasksAssigneeViewModel()
            {
                ProjectTask = newProjectTask,
                TaskAssignees = selectedUsers.Select(user => new TaskAssignee { UserId = user.Id, ProjectTaskId = newProjectTask.Id }).ToList(),
            };

        try
        {
            var response = await client.PostAsJsonAsync("api/ProjectTask/AddProjectTask", taskAssigneeModel);

            if (response.IsSuccessStatusCode)
            {

                newProjectTask = new ProjectTask();
                searchText = "";
                selectedUsers.Clear();
                users = null;
                await Refresh();
                await HideModal();
                ClearFields();
            }
            else
            {

                var errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine("Ошибка при добавлении задачи: " + errorMessage);
            }
        }
        catch (Exception ex)
        {

            Console.WriteLine("Ошибка при добавлении задачи: " + ex.Message);
        }
        errorMessage = string.Empty;
    }


    private Modal modalRef;

    private Task ShowModal()
    {
        return modalRef.Show();
    }

    private Task HideModal()
    {
        searchText = string.Empty;
        return modalRef.Hide();
    }

    private void AddUser(User user)
    {
        selectedUsers.Clear();
        selectedUsers.Add(user);

    }

    private void RemoveUser(User user)
    {
        selectedUsers.Remove(user);
    }

    private void ClearSelectedUser(User user)
    {
        selectedUsers.Remove(user);
        selectedUsers.Clear();
    }



    private Blazorise.Modal editModalRef;

    /// <summary>
    /// Показывает модальное окно редактирования участников проекта.
    /// </summary>
    private async Task ShowEditModal()
    {
        try
        {
            // Показываем модальное окно
            await editModalRef.Show();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при открытии модального окна: {ex.Message}");
        }
    }

    /// <summary>
    /// Скрывает модальное окно редактирования участников проекта.
    /// </summary>
    private async Task HideEditModal()
    {
        try
        {
            // Очищаем выбранных пользователей и строку поиска
            selectedUsers.Clear();
            searchText = string.Empty;

            // Скрываем модальное окно
            await editModalRef.Hide();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Ошибка при закрытии модального окна: {ex.Message}");
        }
    }

    private async Task OnModalClosing(ModalClosingEventArgs e)
    {
        await Refresh();
    }

    /// <summary>
    /// Сохраняет изменения в участниках проекта и обновляет список участников.
    /// </summary>
    private async Task SaveParticipantsChanges()
    {
        // if (!CurrentProject.ProjectTaskUsers.Any())
        // {
        //     errorMessageUsersProject = "Необходимо выбрать хотя бы одного назначенного пользователя.";
        //     return;
        // }
        // else
        // {
        //     errorMessageUsersProject = string.Empty;
        // }
        var response = await client.PutAsJsonAsync<ProjectInfoViewModel>(@"api/project/UpdateProjectInfo", CurrentProject);
        if (response.IsSuccessStatusCode)
        {
            // Скрываем модальное окно
            await HideEditModal();
        }
    }

    /// <summary>
    /// Добавляет пользователя в проект.
    /// </summary>
    /// <param name="userId">Идентификатор пользователя.</param>
    private async Task AddProjectUser(User user)
    {
        if (!CurrentProject.AssignedUsers.Contains(user))
        {
            CurrentProject.AssignedUsers.Add(user);
            users.Remove(user);
        }
    }

    /// <summary>
    /// Удаляет пользователя из проекта.
    /// </summary>
    /// <param name="userId">Идентификатор пользователя.</param>
    private async Task RemoveProjectUser(User user)
    {
        if (CurrentProject.ProjectTaskUsers.Any(ptu => ptu.AssignedUser.Id == user.Id && ptu.ProjectTask.Status == "Uncompleted"))
        {
            // Выведите сообщение пользователю о невозможности удаления пользователя
            errorMessageUsersProject = "Нельзя удалить пользователя, у которого есть невыполненные задачи.";
            return;
        }
        else
        {
            CurrentProject.AssignedUsers.Remove(user);
            errorMessageUsersProject = string.Empty;
        }

    }

    /// <summary>
    /// Выполняет поиск пользователей по имени или фамилии.
    /// </summary>
    /// <param name="value">Строка для поиска.</param>
    private async Task SearchByUsernameForProject(string value)
    {
        searchText = value;
        if (!string.IsNullOrWhiteSpace(searchText))
        {

            var list = await client.GetFromJsonAsync<List<User>>($"api/account/SearchUsers?username={searchText}");
            users = list.Where(user => !CurrentProject.AssignedUsers.Select(u => u.Id).Contains(user.Id)).ToList();
        }
        else
        {
            users = null;
        }
    }



    private Modal editTaskModalRef;
    private ProjectTaskUsersModel selectedTask = null;

    private void OpenEditTaskModal(ProjectTaskUsersModel task)
    {

        selectedTask = task;
        if (selectedTask != null)
        {
            editTaskModalRef.Show();
        }
    }

    private void HideEditTaskModal()
    {
        searchText = string.Empty;
        // selectedTask = null;
        editTaskModalRef.Hide();
    }

    private async void ChangeTaskUser(User user)
    {
        selectedTask.AssignedUser = user;
    }




    private async Task SaveTaskChanges()
    {
        if (string.IsNullOrWhiteSpace(selectedTask.ProjectTask.Name) ||
        string.IsNullOrWhiteSpace(selectedTask.ProjectTask.Description) ||
         string.IsNullOrWhiteSpace(selectedTask.ProjectTask.Status) ||
        string.IsNullOrWhiteSpace(selectedTask.AssignedUser.UserName))
        {
            errorMessageEditingTasks = "Необходимо заполнить все поля.";
            return;
        }
        else
        {
            if (selectedTask.ProjectTask.CompletedAt.HasValue &&
                selectedTask.ProjectTask.CompletedAt.Value < selectedTask.ProjectTask.CreatedAt)
            {
                errorMessageEditingTasks = "Дата завершения не может быть раньше даты создания.";
                return;
            }

            try
            {

                selectedTask.ProjectTask.CreatedAt = selectedTask.ProjectTask.CreatedAt.ToLocalTime();
                selectedTask.ProjectTask.CompletedAt = selectedTask.ProjectTask.CompletedAt?.ToLocalTime();
                var response = await client.PutAsJsonAsync("api/ProjectTask/UpdateProjectTask", selectedTask);
                var b = selectedTask;
                // await UpdateTaskAssignees(CurrentProject.Project.Id, CurrentProject.ProjectTaskUsers);
                if (response.IsSuccessStatusCode)
                {

                    HideEditTaskModal();
                }
                else
                {

                    Console.WriteLine("Ошибка при сохранении изменений по задаче.");
                }
            }
            catch (Exception ex)
            {

                Console.WriteLine($"Ошибка при отправке запроса на сервер: {ex.Message}");
            }
            errorMessageEditingTasks = string.Empty;
            selectedUsers.Clear();
            await Refresh();
            searchText = string.Empty;
        }
    }


    private async Task DeleteProjectTask(Guid taskId)
    {
        await client.DeleteAsync($"api/projectTask/DeleteTask?taskId={taskId}");

        await Refresh();
        HideEditTaskModal();

    }



    private void ProjectTaskClick(Guid id)
    {
        navigate.NavigateTo($"/projectTaskInfo/{id}");
    }
}
<style>
    .edit-uncompleted:hover {
        fill: red;
        cursor: pointer;
    }

    .edit-inprogress:hover {
        fill: yellowgreen;
        cursor: pointer
    }

    .edit-completed:hover {
        fill: limegreen;
        cursor: pointer;
    }
</style>
