@page "/admin-panel"
@using Blazorise
@inject HttpClient client
@inject NavigationManager navigate

<h3>Панель Администратора</h3>
<Blazorise.Modal @bind-IsOpen="ShowErrorModal">
    <ModalHeader>Error</ModalHeader>
    <ModalBody>
        @ErrorMessage
    </ModalBody>
    <ModalFooter>
        <Blazorise.Button Color="Color.Secondary" Clicked="@(() => ShowErrorModal = false)">Close</Blazorise.Button>
    </ModalFooter>
</Blazorise.Modal>

<Blazorise.Tabs @bind-SelectedTab="selectedTab">
    <!-- Вкладка "Список проектов" -->
    <Items>
        <Blazorise.Tab Name="projects" @onclick="() => SelectTab()" >Список проектов</Blazorise.Tab>

        <Blazorise.Tab Name="tasks" Visibility="tasksVisibility ? Visibility.Visible : Visibility.Invisible">Список задач</Blazorise.Tab>
        <Blazorise.Tab Name="comments" Visibility="commentsVisibility ? Visibility.Visible : Visibility.Invisible">Список комментариев</Blazorise.Tab>
    </Items>
    <Content>
        <TabPanel Name="projects">
            <!-- Фильтр для проектов -->
            <Blazorise.Field>
                <FieldLabel>Поиск проектов</FieldLabel>
                <Blazorise.TextEdit Placeholder="Найти проект.." @bind-Value="@projectFilter" TextChanged="FilterProjects" />
            </Blazorise.Field>

            <!-- Вывод списка проектов -->
            @foreach (var project in filteredProjects)
            {
                <div class="d-flex mb-3">
                    <div class="flex-grow-1">
                        <h4 @onclick="() => ProjectClicked(project.Id)">@project.Name</h4>
                        <p>@project.Description</p>
                    </div>
                    <div class="ml-3 d-flex align-items-center">
                        <Blazorise.Button Color="Color.Danger" Clicked="@(() => DeleteProject(project.Id))">Delete</Blazorise.Button>
                    </div>
                </div>
            }

        </TabPanel>

        <!-- Вкладка "Удаление задач" -->
        <TabPanel Name="tasks" Icon="trash">
            <!-- Выбор проекта -->
            <Blazorise.Field>
                @*  <Blazorise.Dropdown Display="Display.InlineBlock">
                <Blazorise.DropdownToggle Color="Color.Primary">Select Project</Blazorise.DropdownToggle>
                <Blazorise.DropdownMenu MaxMenuHeight="300px">
                @foreach (var project in projects)
                {
                <Blazorise.DropdownItem Clicked="@(() => ProjectClicked(project.Id))">@project.Name</Blazorise.DropdownItem>
                }
                </Blazorise.DropdownMenu>
                </Blazorise.Dropdown> *@

                @if (!string.IsNullOrEmpty(selectedProjectName))
                {
                    <p>Выбранный проект: @selectedProjectName</p>
                }
            </Blazorise.Field>


            <!-- Фильтр для задач -->
            <Blazorise.Field>
                <FieldLabel>Поиск задач</FieldLabel>
                <Blazorise.TextEdit Placeholder="Найти задачу.." @bind-Value="@taskFilter" TextChanged="FilterTasks" />
            </Blazorise.Field>

            <!-- Вывод списка задач -->
            @foreach (var task in filteredTasks)
            {
                <div class="d-flex mb-3">
                    <div class="flex-grow-1">
                        <h4 @onclick="() => TaskClicked(task.Id)">@task.Name</h4>
                        <p>@task.Description</p>
                    </div>
                    <div class="ml-3 d-flex align-items-center">
                        <Blazorise.Button Color="Color.Danger" Clicked="@(() => DeleteTask(task.Id))">Удалить</Blazorise.Button>
                    </div>
                </div>
            }
        </TabPanel>

        <TabPanel Name="comments" Icon="message-square">
            <!-- Выбор задачи -->
            <Blazorise.Field>
               @*  <Blazorise.Dropdown Display="Display.InlineBlock">
                    <Blazorise.DropdownToggle Color="Color.Primary">Select Task</Blazorise.DropdownToggle>
                    <Blazorise.DropdownMenu MaxMenuHeight="300px">
                        @foreach (var task in tasks)
                        {
                            <Blazorise.DropdownItem Clicked="@(() => TaskClicked(task.Id))">@task.Name</Blazorise.DropdownItem>
                        }
                    </Blazorise.DropdownMenu>
                </Blazorise.Dropdown> *@

                @if (!string.IsNullOrEmpty(selectedTaskName))
                {
                    <p>Выбранная задача: @selectedTaskName</p>
                }
            </Blazorise.Field>

            <!-- Фильтр для комментариев -->
            <Blazorise.Field>
                <FieldLabel>Поиск комментариев</FieldLabel>
                <Blazorise.TextEdit Placeholder="Найти комментарий.." @bind-Value="@commentFilter" TextChanged="FilterComments" />
            </Blazorise.Field>

            <!-- Вывод списка комментариев -->
            @foreach (var comment in filteredComments)
            {
                <div class="d-flex mt-2">
                    <div class="flex-grow-1">
                        <p>@comment.Text</p>
                    </div>
                    <div class="ml-3 d-flex align-items-center">
                        <Blazorise.Button Color="Color.Danger" class="btn-sm"  Clicked="@(() => DeleteComment(comment.Id))">Удалить</Blazorise.Button>
                    </div>
                </div>
            }

            <!-- Фильтр для вложений -->
            <Blazorise.Field>
                <FieldLabel>Поиск вложений</FieldLabel>
                <Blazorise.TextEdit Placeholder="Найти вложение.." @bind-Value="@attachmentFilter" TextChanged="FilterAttachments" />
            </Blazorise.Field>

            <!-- Вывод списка вложений -->
            @foreach (var attachment in filteredAttachments)
            {
                <div class="d-flex mt-2">
                    <div class="flex-grow-1">
                        <p class="mb-0">@attachment.FileName</p>
                    </div>
                    <div class="ml-3 d-flex align-items-center">
                        <Blazorise.Button Color="Color.Danger" class="btn-sm" Clicked="@(() => DeleteAttachment(attachment.Id))">Удалить</Blazorise.Button>
                    </div>
                </div>
            }
        </TabPanel>

    </Content>
    

</Blazorise.Tabs>

@code {
    private string selectedTab = "projects";
    private List<Project> projects = new List<Project>();
    private List<Project> filteredProjects = new List<Project>();
    private string selectedProjectIdString;

    private Guid SelectedProjectId
    {
        get => Guid.Parse(selectedProjectIdString);
        set => selectedProjectIdString = value.ToString();
    }
    private List<ProjectTask> tasks = new List<ProjectTask>();
    private List<ProjectTask> filteredTasks = new List<ProjectTask>();
    private string projectFilter = string.Empty;
    private string taskFilter = string.Empty;
    private string selectedProjectName = string.Empty;

    protected override async Task OnInitializedAsync()    {
        await RefreshData();
    }

    private void SelectTab()
    {
        selectedTaskIdString = null ;
        selectedProjectIdString = null;
        tasksVisibility = false;
        commentsVisibility = false;
    }

    // private void SelectTab(string tab)
    // {
    //     if (tab == "tasks")
    //     {
    //         if (selectedProjectIdString is not null)
    //         {
    //             selectedTab = tab;
    //             tasksVisibility = true; 
    //             commentsVisibility = false; 
    //         }
    //         else
    //         {
    //             selectedTab = "projects";
    //         }
    //     }
    //     else if (tab == "comments")
    //     {
    //         if (selectedTaskIdString is not null)
    //         {
    //             selectedTab = tab;
    //             tasksVisibility = false; 
    //             commentsVisibility = true; 
    //         }
    //         else
    //         {
    //             selectedTab = "projects";
    //         }
    //     }


    //     if (!tasksVisibility && !commentsVisibility)
    //     {
    //         ShowErrorMessage("Select a project or task first."); 
    //     }
    // }



    private async Task RefreshData()
    {
        var temp = selectedTab;
        projects = await client.GetFromJsonAsync<List<Project>>("/api/project/GetAllProjects");
        filteredProjects = projects;
        if (selectedProjectIdString is not null)
        {
            await ProjectClicked(Guid.Parse(selectedProjectIdString));
            if (selectedTaskIdString is not null)
            {
                await TaskClicked(Guid.Parse(selectedTaskIdString));
            }
        }
        selectedTab = temp;
    }

    

    private async Task LoadTasks(Guid projectId)
    {
        projectId = Guid.Parse(selectedProjectIdString);
        tasks = await client.GetFromJsonAsync<List<ProjectTask>>($"/api/ProjectTask/GetProjectTasksByProjectId?projectId={projectId}");
        FilterTasks(taskFilter);
    }


    private async Task ProjectClicked(Guid projectId)
    {
        selectedProjectIdString = projectId.ToString();
        selectedProjectName = projects.FirstOrDefault(p => p.Id == projectId)?.Name;
        await LoadTasks(projectId);
        selectedTab = "tasks";
        tasksVisibility = true;
       
        comments.Clear();
        filteredComments.Clear();
    }


    private void FilterProjects(string searchText)
    {
        filteredProjects = projects
            .Where(p => p.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase) || p.Description.Contains(searchText, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private void FilterTasks(string searchText)
    {
        filteredTasks = tasks
            .Where(t => t.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase) || t.Description.Contains(searchText, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private async Task DeleteProject(Guid projectId)
    {
        try
        {
            var response = await client.DeleteAsync($"api/project/DeleteProject?projectId={projectId}");
            if (response.IsSuccessStatusCode)
            {
                await RefreshData();
            }
            else
            {

                var errorMessage = await response.Content.ReadAsStringAsync();
                ShowErrorMessage($"Failed to delete project: {errorMessage}");
            }
        }
        catch (Exception ex)
        {

            ShowErrorMessage($"An error occurred: {ex.Message}");
        }
        await RefreshData();
    }

    private async Task DeleteTask(Guid taskId)
    {
        try
        {
            var response = await client.DeleteAsync($"api/projectTask/DeleteTask?taskId={taskId}");
            if (response.IsSuccessStatusCode)
            {
                await LoadTasks(SelectedProjectId);
            }
            else
            {

                var errorMessage = await response.Content.ReadAsStringAsync();
                ShowErrorMessage($"Failed to delete task: {errorMessage}");
            }
        }
        catch (Exception ex)
        {

            ShowErrorMessage($"An error occurred: {ex.Message}");
        }
        await RefreshData();
    }

    private string ErrorMessage { get; set; }
    private bool ShowErrorModal { get; set; }
    private bool tasksVisibility = false;
    private bool commentsVisibility = false;

    private void ShowErrorMessage(string message)
    {
        ErrorMessage = message;
        ShowErrorModal = true;
    }
    private void HideErrorMessage()
    {
        ShowErrorModal = false;
    }
    private List<Comment> comments = new List<Comment>();
    private List<Comment> filteredComments = new List<Comment>();
    private List<Attachment> attachments = new List<Attachment>();
    private List<Attachment> filteredAttachments = new List<Attachment>();
    private string selectedTaskIdString;
    private string selectedTaskName = string.Empty;
    private string commentFilter = string.Empty;
    private string attachmentFilter = string.Empty;

    private async Task TaskClicked(Guid taskId)
    {
        selectedTaskIdString = taskId.ToString();
        selectedTaskName = tasks.FirstOrDefault(t => t.Id == taskId)?.Name;
        await LoadComments(taskId);
        await LoadAttachments(taskId);
        selectedTab = "comments";
        commentsVisibility = true;
      

    }

    private async Task Refresh()
    {
        StateHasChanged();
    }

    private async Task LoadComments(Guid projectTaskId)
    {
        comments = await client.GetFromJsonAsync<List<Comment>>($"/api/comment/GetCommentsByProjectTaskId?projectTaskId={projectTaskId}");
        FilterComments(commentFilter);
    }

    private async Task LoadAttachments(Guid attachmentId)
    {
        attachments = await client.GetFromJsonAsync<List<Attachment>>($"/api/attachment/GetAttachmentsByProjectTaskIdForDelete?attachmentId={attachmentId}");
        FilterAttachments(attachmentFilter);
    }

    private void FilterComments(string searchText)
    {
        filteredComments = comments
            .Where(c => c.Text.Contains(searchText, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private void FilterAttachments(string searchText)
    {
        filteredAttachments = attachments
            .Where(a => a.FileName.Contains(searchText, StringComparison.OrdinalIgnoreCase))
            .ToList();
    }

    private async Task DeleteComment(Guid commentId)
    {
        try
        {
            var response = await client.DeleteAsync($"/api/comment/DeleteComment?commentId={commentId}");

            if (response.IsSuccessStatusCode)
            {
                await LoadComments(Guid.Parse(selectedTaskIdString));
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                ShowErrorMessage($"Failed to delete comment: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            ShowErrorMessage($"An error occurred: {ex.Message}");
        }
        await RefreshData();
    }

    private async Task DeleteAttachment(Guid attachmentId)
    {
        try
        {
            var response = await client.DeleteAsync($"api/attachment/DeleteAttachment?attachmentId={attachmentId}");
            if (response.IsSuccessStatusCode)
            {
                await LoadAttachments(Guid.Parse(selectedTaskIdString));
            }
            else
            {
                var errorMessage = await response.Content.ReadAsStringAsync();
                ShowErrorMessage($"Failed to delete attachment: {errorMessage}");
            }
        }
        catch (Exception ex)
        {
            ShowErrorMessage($"An error occurred: {ex.Message}");
        }
        await RefreshData();
    }
    
}
