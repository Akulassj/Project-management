@using Blazorise
@using ProjectManagement.Client.Services;
@using Microsoft.AspNetCore.Components.Authorization;
@inherits LayoutComponentBase
@inject NavigationManager navigationManager
@inject CustomStateProvider authStateProvider
@inject ProjectManagement.Client.Services.INotificationService notificationService

<div class="page">
    <div class="sidebar">
        <AuthorizeView>
            <Authorized>
                <NavMenu userName=@(authStateProvider.GetAuthenticationStateAsync().Result.User.Identity.Name) />
            </Authorized>
            <NotAuthorized>
                <NavMenu />
            </NotAuthorized>
        </AuthorizeView>
    </div>

    <main>
        <div class="top-row px-4">
            <AuthorizeView>
                <Authorized>
                    <Blazorise.Dropdown Display="Display.InlineBlock" Class="me-2">
                        <Blazorise.DropdownToggle Color="Color.Primary">
                            Уведомления (@unreadNotificationsCount)
                            @if (notifications != null && notifications.Any())
                            {
                                <svg width="3.8ex" height="3.8ex" viewBox="0 0 24 24" fill="#ffdc54" xmlns="http://www.w3.org/2000/svg" style="margin-top: -0.6ex;">
                                    <g clip-path="url(#clip0_15_159)">
                                        <rect width="24" height="24" fill="none" />
                                        <path d="M9.5 19C8.89555 19 7.01237 19 5.61714 19C4.87375 19 4.39116 18.2177 4.72361 17.5528L5.57771 15.8446C5.85542 15.2892 6 14.6774 6 14.0564C6 13.2867 6 12.1434 6 11C6 9 7 5 12 5C17 5 18 9 18 11C18 12.1434 18 13.2867 18 14.0564C18 14.6774 18.1446 15.2892 18.4223 15.8446L19.2764 17.5528C19.6088 18.2177 19.1253 19 18.382 19H14.5M9.5 19C9.5 21 10.5 22 12 22C13.5 22 14.5 21 14.5 19M9.5 19C11.0621 19 14.5 19 14.5 19" stroke="#000000" stroke-linejoin="round" />
                                        <path d="M12 5V3" stroke="#000000" stroke-linecap="round" stroke-linejoin="round" />
                                    </g>
                                    <defs>
                                        <clipPath id="clip0_15_159">
                                            <rect width="24" height="24" fill="white" />
                                        </clipPath>
                                    </defs>
                                </svg>
                            }
                            else
                            {
                                <svg width="3.8ex" height="3.8ex" viewBox="0 0 24 24" fill="white" xmlns="http://www.w3.org/2000/svg" style="margin-top: -0.6ex;">
                                    <g clip-path="url(#clip0_15_159)">
                                        <rect width="24" height="24" fill="none" />
                                        <path d="M9.5 19C8.89555 19 7.01237 19 5.61714 19C4.87375 19 4.39116 18.2177 4.72361 17.5528L5.57771 15.8446C5.85542 15.2892 6 14.6774 6 14.0564C6 13.2867 6 12.1434 6 11C6 9 7 5 12 5C17 5 18 9 18 11C18 12.1434 18 13.2867 18 14.0564C18 14.6774 18.1446 15.2892 18.4223 15.8446L19.2764 17.5528C19.6088 18.2177 19.1253 19 18.382 19H14.5M9.5 19C9.5 21 10.5 22 12 22C13.5 22 14.5 21 14.5 19M9.5 19C11.0621 19 14.5 19 14.5 19" stroke="#000000" stroke-linejoin="round" />
                                        <path d="M12 5V3" stroke="#000000" stroke-linecap="round" stroke-linejoin="round" />
                                    </g>
                                    <defs>
                                        <clipPath id="clip0_15_159">
                                            <rect width="24" height="24" fill="white" />
                                        </clipPath>
                                    </defs>
                                </svg>
                            }
                        </Blazorise.DropdownToggle>
                        <Blazorise.DropdownMenu MaxMenuHeight="300px">
                            @if (notifications != null && notifications.Any())
                            {
                                @foreach (var notification in notifications.OrderByDescending(n => n.CreatedAt))
                                {
                                    @if (notification.IsReaded)
                                    {
                                          <Blazorise.DropdownItem >
                                            @notification.Message
                                        </Blazorise.DropdownItem>
                                        <DropdownDivider />
                                    }
                                    else
                                    {
                                        <Blazorise.DropdownItem TextColor="Blazorise.TextColor.Primary" @onclick="@(() => MarkAsRead(notification))">
                                            @notification.Message
                                        </Blazorise.DropdownItem>
                                        <DropdownDivider />
                                    }
                                }
                            }
                            else
                            {
                                <span class="dropdown-item disabled">No notifications</span>
                            }
                            <button class="ms-4 me-4 mt-1 btn btn-danger" @onclick="() => DeleteReaded()">Удалить прочитанные уведомления</button>
                        </Blazorise.DropdownMenu>

                    </Blazorise.Dropdown>
                    <button type="button" class="btn btn-dark ml-md-auto" @onclick="@LogoutClick">Выйти</button>
                </Authorized>
                <NotAuthorized>
                    <button type="button" class="btn btn-dark ml-md-auto" @onclick="@LoginClick">Войти</button>
                </NotAuthorized>
            </AuthorizeView>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>
@functions {

    async Task LogoutClick()
    {
        await authStateProvider.Logout();
        navigationManager.NavigateTo("/");
    }
    async Task LoginClick()
    {
        navigationManager.NavigateTo("/login");
    }

    private List<Notification> notifications;
    private int unreadNotificationsCount;

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
    }

    protected async Task Refresh()
    {
        string name = (await authStateProvider.GetAuthenticationStateAsync()).User.Identity.Name;
        if (name is not null)
        {
            notifications = await notificationService.GetNotifications(name);
            unreadNotificationsCount = notifications.Count(n => !n.IsReaded);
        }
    }

    private async Task MarkAsRead(Notification notification)
    {
        notification.IsReaded = true;      

        // Optionally, send an update to the server about the read status
        await notificationService.UpdateNotification(notification);

        await Refresh();

    }

    private async Task DeleteReaded()
    {
        string name = (await authStateProvider.GetAuthenticationStateAsync()).User.Identity.Name;

        await notificationService.DeleteReaded(name);

        await Refresh();

    }
}