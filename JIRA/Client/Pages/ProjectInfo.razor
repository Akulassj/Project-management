@page "/projectInfo/{projectId}"
@using JIRA.Shared.Entity
@using TabBlazor
@using MatBlazor
@using System
@using System.Collections.Generic
@using TabBlazor.Services
@using Blazorise
@inject Blazorise.IModalService ModalService
@using ApexCharts
@inject HttpClient client
@inject NavigationManager navigate

<TabBlazor.Tabs>
    <TabBlazor.Tab Title="Главная" Icon="home">
        <div class="container">
            @if (CurrentProject is not null)
            {
                <div class="row">
                    <div class="col-md-12 text-center">
                        <h3>Информация о проекте</h3>
                        <p>Название проекта: @CurrentProject.Name</p>
                        <p>Описание проекта: @CurrentProject.Description</p>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <h3>Информация о заданиях</h3>
                        <p>Количество заданий: @Jobs.Count()</p>
                        <div class="btn btn-primary text-center" @onclick="GetJobs">Получить список Задач</div>
                        <Blazorise.Button Color="Blazorise.Color.Success" Clicked="@ShowModal">Create task</Blazorise.Button>
                        <Blazorise.Modal @ref="modalRef">
                            <Blazorise.ModalContent Centered>
                             <Blazorise.ModalHeader>
                                 <ModalTitle>Create Task</ModalTitle>
                                 <CloseButton />
                             </Blazorise.ModalHeader>
                             <Blazorise.ModalBody>
                                 <Blazorise.Field>
                                     <FieldLabel>Name</FieldLabel>
                                     <TextEdit Placeholder="Enter task name..." @bind-Text="newJob.Name" />
                                 </Blazorise.Field>
                                 <Blazorise.Field>
                                     <FieldLabel>Description</FieldLabel>
                                     <TextEdit Placeholder="Enter task description..." @bind-Text="newJob.Description" />
                                 </Blazorise.Field>

                                 <Blazorise.Field>
                                     <Blazorise.FieldLabel>Search</Blazorise.FieldLabel>
                                     <Blazorise.TextEdit Placeholder="Search by name or surname..." @bind-Text="searchText" @onkeypress=GetUsersSearch />
                                 </Blazorise.Field>

                                 @if (users != null)
                                    {
                                        <div class="search-results">
                                            @foreach (var user in users)
                                            {
                                                <div class="search-result" @onclick="() => AddUser(user)">
                                                    @user.UserName
                                                </div>
                                            }
                                        </div>
                                    }

                                    @if (selectedUsers.Any())
                                    {
                                        <div>
                                            <h4>Selected Users:</h4>
                                            @foreach (var user in selectedUsers)
                                            {
                                                <div>
                                                    <p>@user.UserName</p>
                                                    <Blazorise.Button Color="Blazorise.Color.Danger" Clicked="() => RemoveUser(user)">Remove</Blazorise.Button>
                                                </div>
                                            }
                                        </div>
                                    }


                                </Blazorise.ModalBody>
                                <ModalFooter>
                                    <Blazorise.Button Color="Blazorise.Color.Secondary" Clicked="@HideModal">Close</Blazorise.Button>
                                    <Blazorise.Button Color="Blazorise.Color.Primary" Clicked="@CreateJob">Save Changes</Blazorise.Button>
                                </ModalFooter>
                            </Blazorise.ModalContent>
                        </Blazorise.Modal>
                        @if (Jobs.Any())
                        {
                            <h3>Список Задач:</h3>
                            <ul>
                                @foreach (var job in Jobs)
                                {
                                    <li @onclick="() => JobClick(job.Id)">@job.Name - @job.Description</li>
                                }
                            </ul>
                        }
                    </div>
                    <div class="col-md-6">
                        <h3>Календарь</h3>

                        <TabBlazor.Datepicker @bind-SelectedDate="SelectedDate" Label="Выберите дату" />
                        <TabBlazor.Button class="btn-primary" @onclick="OnSelectedDateChanged"></TabBlazor.Button>

                        @if (SelectedDateTasks != null && SelectedDateTasks.Any())
                        {
                            <h4>Задания на @SelectedDate.ToString("d"):</h4>
                            <ul>
                                @foreach (var task in SelectedDateTasks)
                                {
                                    <li @onclick="() => JobClick(task.Id)">@task.Name</li>
                                }
                            </ul>
                        }
                        else
                        {
                            <p>На @SelectedDate.ToString("d") заданий нет.</p>
                        }
                    </div>
                </div>
                @if (Jobs is not null)
                {
                    <div class="row">
                        <div class="col-md-6">
                            <h3>Графики</h3>
                            <div class="row">
                                <div class="col-md-12">

                                    <ApexChart @ref=chart TItem="Job"
                                               Title="Job Status Distribution" Debug>

                                     <ApexPointSeries TItem="Job"
                                                      Items="Jobs"
                                                      Name="Job Status"
                                                      SeriesType="SeriesType.Pie"
                                                      XValue="@(e => e.Status)"
                                                      YAggregate="@(e => e.Count())"
                                                      OrderByDescending="@(e=>e.Y)"
                                                      PointColor="@(e=> GetPointColor(e))" ShowDataLabels />
                                     </ApexChart>

                                 </div>
                             </div>
                         </div>
                         <div class="col-md-6">
                             <!-- Список участников заданий -->
                             <h3>Участники заданий</h3>
                             <ul>
                                 <div class="btn btn-primary text-center" @onclick="GetAssignedUsers">Получить участников проекта</div>
                                 @if (AssignedUsers != null && AssignedUsers.Any())
                                {
                                    <h3>Участники проекта:</h3>
                                    <ul>
                                        @foreach (var user in AssignedUsers)
                                        {
                                            <li>@user.UserName - @user.Position</li>
                                        }
                                    </ul>
                                }
                                else
                                {
                                    <p>Участников проекта не найдено.</p>
                                }

                            </ul>
                        </div>
                    </div>

                }
            }
        </div>

    </TabBlazor.Tab>
    <TabBlazor.Tab Title="Список задач" Icon="other-icon">
    </TabBlazor.Tab>
</TabBlazor.Tabs>

@code {
    public Project CurrentProject { get; set; } = default!;
    [Parameter]
    public string projectId { get; set; }

    private List<Job> SelectedDateTasks { get; set; } = new List<Job>();

    private DateTime SelectedDate { get; set; } = DateTime.UtcNow.ToLocalTime();

    private List<Job> Jobs = new List<Job>();

    private List<TaskAssignee> TaskAssignees = new List<TaskAssignee>();

    private List<User> AssignedUsers = new List<User>();

    private ApexChart<Job> chart = default!;

    public string userName { get; set; }
    private List<User> users;
    private List<User> selectedUsers = new List<User>();
    private Job newJob = new Job();
    private string searchText = "";

    private async Task GetJobs()
    {
        Jobs = await client.GetFromJsonAsync<List<Job>>($"api/project/GetProjectJobs?projectId={projectId}");
    }


    protected override async Task OnInitializedAsync()
    {
        SelectedDate = DateTime.Today;

        await Refresh();
    }

    private async Task GetAssignedUsers()
    {
        AssignedUsers = await client.GetFromJsonAsync<List<User>>($"/api/project/GetProjectAsigneeUsers?projectId={projectId}");

    }

    private async Task Refresh()
    {
        CurrentProject = await client.GetFromJsonAsync<Project>($"api/project/GetProject?projectId={projectId}");
        await GetJobs();
        await UpdateTasksForSelectedDate();
        StateHasChanged();
    }

    private async Task OnSelectedDateChanged() => await UpdateTasksForSelectedDate();

    private async Task UpdateTasksForSelectedDate()
    {
        try
        {

            string formattedDate = SelectedDate.ToString("yyyy-MM-ddTHH:mm:ssZ");


            SelectedDateTasks = await client.GetFromJsonAsync<List<Job>>($"api/project/GetJobsByDate?projectId={projectId}&date={formattedDate}");
        }
        catch (Exception ex)
        {
            
            Console.WriteLine($"Ошибка при получении заданий для даты: {ex.Message}");
        }
    }

    private string GetPointColor(Job job)
    {
        switch (job.Status)
        {
            case "Completed":
                return "#00783c"; 
            case "Uncompleted":
                return "#e3001b"; 
            default:
                return "#87775d"; 
        }
    }
    private async Task GetUsersSearch()
    {
        if (!string.IsNullOrWhiteSpace(searchText))
        {
            
            users = await client.GetFromJsonAsync<List<User>>($"api/job/SearchUsersInProject?projectId={projectId}&username={searchText}");
            await Task.Delay(1000);
        }
        else
        {
            users = null;
            selectedUsers = new List<User>();
        }
    }

   

    private async Task CreateJob()
    {
        var newJob = new Job()
            {
                Name = this.newJob.Name,
                Description = this.newJob.Description,
                Status = "Uncompleted",
                ProjectId = new Guid(projectId)
            };

        var taskAssignees = new List<TaskAssignee>();
        foreach (var user in selectedUsers)
        {
            taskAssignees.Add(new TaskAssignee()
                {
                    UserId = user.Id,
                    JobId = newJob.Id
                });
        }

        var taskAssigneeModel = new TasksAssigneeViewModel()
            {
                Job = newJob,
                TaskAssignees = selectedUsers.Select(user => new TaskAssignee { UserId = user.Id, JobId = newJob.Id }).ToList(),
            };

        try
        {
            var response = await client.PostAsJsonAsync("api/Job/AddJob", taskAssigneeModel);

            if (response.IsSuccessStatusCode)
            {
               
                newJob = new Job();
                searchText = "";
                selectedUsers.Clear();
                users.Clear();
                await Refresh();
                await GetJobs();
                await HideModal();

            }
            else
            {
               
                var errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine("Ошибка при добавлении задачи: " + errorMessage);
            }
        }
        catch (Exception ex)
        {
            
            Console.WriteLine("Ошибка при добавлении задачи: " + ex.Message);
        }
    }



    private Modal modalRef;

    private Task ShowModal()
    {
        return modalRef.Show();
    }

    private Task HideModal()
    {
        return modalRef.Hide();
    }

    private void AddUser(User user)
    {
        if (!selectedUsers.Contains(user))
        {
            selectedUsers.Add(user);
            searchText = user.UserName; 
        }
    }


    private void RemoveUser(User user)
    {
        selectedUsers.Remove(user);
    }



    private void JobClick(Guid id)
    {
        navigate.NavigateTo($"/jobInfo/{id}");
    }
}
