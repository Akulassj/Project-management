@page "/projectInfo/{projectId}"
@using JIRA.Shared.Entity
@using TabBlazor
@using MatBlazor
@using System
@using System.Collections.Generic
@using TabBlazor.Services
@using Blazorise
@inject Blazorise.IModalService ModalService
@using ApexCharts
@inject HttpClient client
@inject NavigationManager navigate

<TabBlazor.Tabs>
    <TabBlazor.Tab Title="Главная" Icon="home">
        <div class="container">
            @if (CurrentProject is not null)
            {
                <div class="row">
                    <div class="col-md-12 text-center">
                        <h3>Информация о проекте</h3>
                        <p>Название проекта: @CurrentProject.Project.Name</p>
                        <p>Описание проекта: @CurrentProject.Project.Description</p>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <h3>Информация о заданиях</h3>
                        <p>Количество заданий: @CurrentProject.ProjectTaskUsers.Count()</p>
                        @*  <div class="btn btn-primary text-center" @onclick="GetProjectTasks">Получить список Задач</div> *@

                        @if (CurrentProject.ProjectTaskUsers.Any())
                        {
                            <h3>Список Задач:</h3>
                            <ul>
                                @foreach (var projectTask in CurrentProject.ProjectTaskUsers.Select(pt => pt.ProjectTask))
                                {
                                    <li @onclick="() => ProjectTaskClick(projectTask.Id)">@projectTask.Name - @projectTask.Description</li>
                                }
                            </ul>
                        }
                    </div>
                    <div class="col-md-6">
                        <h3>Календарь</h3>

                        <TabBlazor.Datepicker @bind-SelectedDate="SelectedDate" Label="Выберите дату" />
                        <TabBlazor.Button class="btn-primary" @onclick="OnSelectedDateChanged"></TabBlazor.Button>

                        @if (SelectedDateTasks != null && SelectedDateTasks.Any())
                        {
                            <h4>Задания на @SelectedDate.ToString("d"):</h4>
                            <ul>
                                @foreach (var task in SelectedDateTasks)
                                {
                                    <li @onclick="() => ProjectTaskClick(task.Id)">@task.Name</li>
                                }
                            </ul>
                        }
                        else
                        {
                            <p>На @SelectedDate.ToString("d") заданий нет.</p>
                        }
                    </div>
                </div>
                @if (CurrentProject.ProjectTaskUsers is not null)
                {
                    <div class="row">
                        <div class="col-md-6">
                            <h3>Графики</h3>
                            <div class="row">
                                <div class="col-md-12">

                                    <ApexChart @ref=chart TItem="ProjectTask"
                                               Title="ProjectTask Status Distribution" Debug>

                                        <ApexPointSeries TItem="ProjectTask"
                                                         Items="CurrentProject.ProjectTaskUsers.Select(pt => pt.ProjectTask)"
                                                         Name="ProjectTask Status"
                                                         SeriesType="SeriesType.Pie"
                                                         XValue="@(e => e.Status)"
                                                         YAggregate="@(e => e.Count())"
                                                         OrderByDescending="@(e=>e.Y)"
                                                         PointColor="@(e=> GetPointColor(e))" ShowDataLabels />
                                    </ApexChart>

                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <!-- Список участников заданий -->
                            <h3>Участники заданий</h3>
                            <ul>
                                @* <div class="btn btn-primary text-center" @onclick="GetAssignedUsers">Получить участников проекта</div> *@
                                @if (CurrentProject.AssignedUsers.Any())
                                {
                                    <h3>Участники проекта:</h3>
                                    <ul>
                                        @foreach (var user in CurrentProject.AssignedUsers)
                                        {
                                            <li>@user.UserName - @user.Position</li>
                                        }
                                    </ul>
                                }
                                else
                                {
                                    <p>Участников проекта не найдено.</p>
                                }

                            </ul>
                        </div>
                    </div>

                }
            }
        </div>

    </TabBlazor.Tab>
    <TabBlazor.Tab Title="Список задач" Icon="other-icon">
        <Blazorise.Button Color="Blazorise.Color.Success" Clicked="@ShowModal">Create task</Blazorise.Button>
        <Blazorise.Modal @ref="modalRef">
            <Blazorise.ModalContent Centered>
                <Blazorise.ModalHeader>
                    <ModalTitle>Create Task</ModalTitle>
                    <CloseButton />
                </Blazorise.ModalHeader>
                <Blazorise.ModalBody>
                    <Blazorise.Field>
                        <FieldLabel>Name</FieldLabel>
                        <TextEdit Placeholder="Enter task name..." @bind-Text="newProjectTask.Name" />
                    </Blazorise.Field>
                    <Blazorise.Field>
                        <FieldLabel>Description</FieldLabel>
                        <TextEdit Placeholder="Enter task description..." @bind-Text="newProjectTask.Description" />
                    </Blazorise.Field>

                    <Blazorise.Field>
                        <Blazorise.FieldLabel>Search</Blazorise.FieldLabel>
                        <Blazorise.TextEdit Placeholder="Search by name or surname..." Text=@searchText TextChanged=GetUsersSearch />
                    </Blazorise.Field>

                    @if (users != null)
                    {
                        <div class="search-results">
                            @foreach (var user in users)
                            {
                                <div class="search-result" @onclick="() => AddUser(user)">
                                    @user.UserName
                                </div>
                            }
                        </div>
                    }

                    @if (selectedUsers.Any())
                    {
                        <div>
                            <h4>Selected Users:</h4>
                            @foreach (var user in selectedUsers)
                            {
                                <div>
                                    <p>@user.UserName</p>
                                    <Blazorise.Button Color="Blazorise.Color.Danger" Clicked="() => RemoveUser(user)">Remove</Blazorise.Button>
                                </div>
                            }
                        </div>
                    }


                </Blazorise.ModalBody>
                <ModalFooter>
                    <Blazorise.Button Color="Blazorise.Color.Secondary" Clicked="@HideModal">Close</Blazorise.Button>
                    <Blazorise.Button Color="Blazorise.Color.Primary" Clicked="@CreateProjectTask">Save Changes</Blazorise.Button>
                </ModalFooter>
            </Blazorise.ModalContent>
        </Blazorise.Modal>

        <div class="container">
            <h3>Список задач</h3>
            @if (CurrentProject.ProjectTaskUsers.Any())
            {
                <div class="table-responsive-sm">
                    <table class="table table-bordered border-dark">
                        <thead>
                            <tr>
                                <th scope="col">Название</th>
                                <th scope="col">Описание</th>
                                <th scope="col">Статус</th>
                                <th scope="col">Ответственные</th>
                                <th scope="col">Дата создания</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach (var model in CurrentProject.ProjectTaskUsers)
                            {

                                <tr>
                                    <td>@model.ProjectTask.Name</td>
                                    <td>@model.ProjectTask.Description</td>
                                    <td>
                                        <select class="form-select" @onchange="@(e => ChangeProjectTaskStatus(model.ProjectTask, e.Value.ToString()))">
                                            <option value="Completed" selected="@((model.ProjectTask.Status == "Completed"))">Выполнено</option>
                                            <option value="Uncompleted" selected="@((model.ProjectTask.Status == "Uncompleted"))">Невыполнено</option>
                                        </select>
                                    </td>
                                    <td>
                                        @if (model.AssignedUsers.Any())
                                        {
                                            <ul>
                                                @foreach (var user in model.AssignedUsers)
                                                {
                                                    <li>@user.UserName - @user.Position</li>
                                                }
                                            </ul>
                                        }
                                        else
                                        {
                                            <p>Назначенных пользователей нет.</p>
                                        }
                                    </td>
                                    <td>@model.ProjectTask.CreatedAt.ToString("yyyy-MM-dd")</td>
                                </tr>
                            }

                        </tbody>
                    </table>
                </div>
            }

            else
            {
                <p>Задачи отсутствуют.</p>
            }
        </div>

    </TabBlazor.Tab>






</TabBlazor.Tabs>

@code {
    public ProjectInfoViewModel CurrentProject { get; set; } = default!;
    [Parameter]
    public string projectId { get; set; }

    private List<ProjectTask> SelectedDateTasks { get; set; } = new List<ProjectTask>();

    private DateTime SelectedDate { get; set; } = DateTime.UtcNow.ToLocalTime();

    private ApexChart<ProjectTask> chart = default!;

    public string userName { get; set; }
    private List<User> users;
    private List<User> selectedUsers = new List<User>();
    private ProjectTask newProjectTask = new ProjectTask();
    private string searchText = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        SelectedDate = DateTime.Today;

        await Refresh();


    }

    private async Task Refresh()
    {
        CurrentProject = await client.GetFromJsonAsync<ProjectInfoViewModel>($"api/project/GetProjectInfoViewModel?projectId={projectId}");
        await UpdateTasksForSelectedDate();
        StateHasChanged();
    }

    private async Task OnSelectedDateChanged() => await UpdateTasksForSelectedDate();

    private async Task UpdateTasksForSelectedDate()
    {
        try
        {

            string formattedDate = SelectedDate.ToString("yyyy-MM-ddTHH:mm:ssZ");


            SelectedDateTasks = await client.GetFromJsonAsync<List<ProjectTask>>($"api/project/GetProjectTasksByDate?projectId={projectId}&date={formattedDate}");
        }
        catch (Exception ex)
        {

            Console.WriteLine($"Ошибка при получении заданий для даты: {ex.Message}");
        }
    }

    private string GetPointColor(ProjectTask projectTask)
    {
        switch (projectTask.Status)
        {
            case "Completed":
                return "#00783c";
            case "Uncompleted":
                return "#e3001b";
            default:
                return "#87775d";
        }
    }
    private async Task ChangeProjectTaskStatus(ProjectTask projectTask, string status)
    {
        projectTask.Status = status;

        await client.PutAsJsonAsync("api/ProjectTask/UpdateProjectTaskStatus", projectTask);
    }


    private async Task GetUsersSearch(string value)
    {
        searchText = value;
        if (!string.IsNullOrWhiteSpace(searchText))
        {

            users = await client.GetFromJsonAsync<List<User>>($"api/projectTask/SearchUsersInProject?projectId={projectId}&username={searchText}");
            await Task.Delay(1000);
        }
        else
        {
            users = null;
            selectedUsers = new List<User>();
        }
    }



    private async Task CreateProjectTask()
    {
        var newProjectTask = new ProjectTask()
            {
                Name = this.newProjectTask.Name,
                Description = this.newProjectTask.Description,
                Status = "Uncompleted",
                ProjectId = new Guid(projectId)
            };

        var taskAssignees = new List<TaskAssignee>();
        foreach (var user in selectedUsers)
        {
            taskAssignees.Add(new TaskAssignee()
                {
                    UserId = user.Id,
                    ProjectTaskId = newProjectTask.Id
                });
        }

        var taskAssigneeModel = new TasksAssigneeViewModel()
            {
                ProjectTask = newProjectTask,
                TaskAssignees = selectedUsers.Select(user => new TaskAssignee { UserId = user.Id, ProjectTaskId = newProjectTask.Id }).ToList(),
            };

        try
        {
            var response = await client.PostAsJsonAsync("api/ProjectTask/AddProjectTask", taskAssigneeModel);

            if (response.IsSuccessStatusCode)
            {

                newProjectTask = new ProjectTask();
                searchText = "";
                selectedUsers.Clear();
                users.Clear();
                await Refresh();
                await HideModal();
            }
            else
            {

                var errorMessage = await response.Content.ReadAsStringAsync();
                Console.WriteLine("Ошибка при добавлении задачи: " + errorMessage);
            }
        }
        catch (Exception ex)
        {

            Console.WriteLine("Ошибка при добавлении задачи: " + ex.Message);
        }
    }


    private Modal modalRef;

    private Task ShowModal()
    {
        return modalRef.Show();
    }

    private Task HideModal()
    {
        return modalRef.Hide();
    }

    private void AddUser(User user)
    {
        if (!selectedUsers.Contains(user))
        {
            selectedUsers.Add(user);
            searchText = user.UserName;
        }
    }


    private void RemoveUser(User user)
    {
        selectedUsers.Remove(user);
    }



    private void ProjectTaskClick(Guid id)
    {
        navigate.NavigateTo($"/projectTaskInfo/{id}");
    }
}
