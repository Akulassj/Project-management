@page "/jobInfo/{JobId}"
@using JIRA.Client.Services
@using JIRA.Shared
@using System.Security.Claims

@inject HttpClient client
@inject CustomStateProvider stateProvider

@if (jobComments is not null)
{
    <div>
        <h4>Job name: @jobComments.Job.Name</h4>
        <h5>Description: @jobComments.Job.Description</h5>
    </div>

    <h3>Comments</h3>

    <Timeline Type="TimelineType.Default">
        @foreach (var comment in jobComments.Comments)
        {
            <TimelineItem Time=@comment.CreatedAt.ToString("f") Title="@comment.User.UserName" IconColor="TablerColor.Green" IconText="@comment.User.UserName[0..1]">
                <p class="text-secondary">@comment.Text</p>
            </TimelineItem>

        }
    </Timeline>
    <div>
        <input type="text" @bind="NewCommentText" placeholder="Enter your comment" />
        <div class="btn btn-primary text-center" @onclick="AddComment">Добавить комментарий</div>
    </div>
}

@code {

    [Parameter]
    public string JobId { get; set; }

    private JobComments jobComments;

    private string NewCommentText = "";

    protected override async void OnInitialized()
    {
        await Refresh();
    }

    private async Task Refresh()
    {
        if (!string.IsNullOrEmpty(JobId))
        {

            jobComments = await client.GetFromJsonAsync<JobComments>($"/api/project/GetJobCommentsById?jobId={JobId}");
            jobComments.Comments.Sort();
            StateHasChanged();

        }
    }

    private async Task AddComment()
    {
        if (!string.IsNullOrEmpty(NewCommentText))
        {
            var user = await stateProvider.GetAuthenticationStateAsync();
            var comment = new Comment
                {
                    Text = NewCommentText,
                    JobId = Guid.Parse(JobId),
                    UserId = Guid.Parse(user.User.FindFirst(ClaimTypes.NameIdentifier).Value)
                };

            var response = await client.PostAsJsonAsync("/api/comment/Add", comment);
            if (response.IsSuccessStatusCode)
            {
                await Refresh();
                NewCommentText = "";
            }


        }
    }
}
