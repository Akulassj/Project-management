@page "/projects/{userName}"
@using TabBlazor.Services
@using Blazorise
@inject HttpClient client
@inject NavigationManager navigate

<h3>MyProjectList</h3>

<Blazorise.Button Color="Color.Success" Clicked="@ShowModal">Create project</Blazorise.Button>
<Blazorise.Modal @ref="modalRef">
    <Blazorise.ModalContent Centered>
        <Blazorise.ModalHeader>
            <ModalTitle>Create project</ModalTitle>
            <CloseButton />
        </Blazorise.ModalHeader>
        <Blazorise.ModalBody>
            <Blazorise.Field>
                <FieldLabel>Name</FieldLabel>
                <TextEdit Placeholder="Enter project name..." @bind-Text="newProject.Name" />
            </Blazorise.Field>
            <Blazorise.Field>
                <FieldLabel>Description</FieldLabel>
                <TextEdit Placeholder="Enter project description..." @bind-Text="newProject.Description" />
            </Blazorise.Field>

            <Blazorise.Field>
                <Blazorise.FieldLabel>Search</Blazorise.FieldLabel>
                <Blazorise.TextEdit Placeholder="Search by name or surname..." Text=@searchText TextChanged="GetUsersSearch" />
            </Blazorise.Field>

            @if (users is not null && users.Any())
            {
                <div class="search-results">
                    @foreach (var user in users)
                    {
                        <div class="search-result" @onclick="() => AddUser(user)">
                            @user.UserName
                        </div>
                    }
                </div>
            }

            @if (SelectedUsers is not null && SelectedUsers.Any())
            {
                <div>
                    <h4>Selected Users:</h4>
                    @foreach (var user in SelectedUsers)
                    {
                        <div>
                            <p>@user.UserName</p>
                            <Blazorise.Button Color="Color.Danger" Clicked="() => RemoveUser(user)">Remove</Blazorise.Button>
                        </div>
                    }
                </div>
            }

        </Blazorise.ModalBody>
        <ModalFooter>
            <Blazorise.Button Color="Color.Secondary" Clicked="@HideModal">Close</Blazorise.Button>
            <Blazorise.Button Color="Color.Primary" Clicked="@CreateProject">Save Changes</Blazorise.Button>
        </ModalFooter>
    </Blazorise.ModalContent>
</Blazorise.Modal>

<TabBlazor.Card>
    @foreach (var project in projects)
    {
        <TabBlazor.CardBody class="my-card-body" @onclick="() => ProjectClick(project.Id)">
            <TabBlazor.CardTitle>
                <h3>@project.Name</h3>
            </TabBlazor.CardTitle>
            @project.Description
        </TabBlazor.CardBody>
    }
    </TabBlazor.Card>

@code {

    private Project newProject = new Project();

    private string searchText = string.Empty;

    private List<User> users { get; set; } = new List<User>();

    [Parameter]
    public List<User> SelectedUsers { get; set; } = new List<User>();

    [Parameter]
    public string userName { get; set; }

    private List<Project> projects = new List<Project>();

    List<User> selectedUsers { get; set; } = new List<User>();

    protected override async void OnInitialized()
    {
        await Refresh();
    }

    private async Task Refresh()
    {
        projects = await client.GetFromJsonAsync<List<Project>>($"/api/project/GetUserProjects/?userName={userName}");
        selectedUsers.Clear();
        searchText = string.Empty;
        users.Clear();
        StateHasChanged();
    }

    private void ProjectClick(Guid id)
    {
        navigate.NavigateTo($"/projectInfo/{id}");
    }

    private Modal modalRef;

    private Task ShowModal()
    {
        return modalRef.Show();
    }

    private async Task GetUsersSearch(string value)
    {
        searchText = value;
        if (!string.IsNullOrWhiteSpace(searchText))
        {

            users = await client.GetFromJsonAsync<List<User>>($"api/project/SearchUsers?username={searchText}");

        }
        else
        {
            users.Clear();
        }
    }

    private void AddUser(User user)
    {
        if (!SelectedUsers.Contains(user))
        {
            SelectedUsers.Add(user);
        }
    }

    private void RemoveUser(User user)
    {
        SelectedUsers.Remove(user);
    }

    private Task HideModal()
    {
        return modalRef.Hide();
    }

    private async Task CreateProject()
    {
        var asigneeList = new List<ProjectAsignee>();
        foreach (var user in SelectedUsers)
        {
            asigneeList.Add(new ProjectAsignee() { UserId = user.Id, ProjectId = newProject.Id });
        }

        var pj = new ProjectsAsigneeViewModel()
            {
                Project = newProject,
                ProjectAsignees = asigneeList,
                UserName = userName
            };

        await client.PostAsJsonAsync("api/Project/AddProject", pj);

        newProject = new Project();
        SelectedUsers.Clear();
        await HideModal();
        Refresh();
    }

}
<style>
    .card-body:hover {
        background-color: darkcyan !important;
    }
</style>