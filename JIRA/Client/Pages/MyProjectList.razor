@page "/projects/{userName}"
@using TabBlazor.Services
@using Blazorise
@inject HttpClient client
@inject NavigationManager navigate
@inject Blazorise.IModalService ModalService

<h3>MyProjectList</h3>
@* <Button class="mb-2" @onclick="ShowModal" BackgroundColor="TablerColor.Green" Shape="ButtonShape.Pill">Create new project</Button> *@

<Blazorise.Button Color="Color.Success" Clicked="@ShowModal">Show Modal</Blazorise.Button>

<Blazorise.Modal @ref="modalRef">
    <Blazorise.ModalContent Centered>
        <Blazorise.ModalHeader>
            <ModalTitle>Create project</ModalTitle>
            <CloseButton />
        </Blazorise.ModalHeader>
        <Blazorise.ModalBody>
            <Blazorise.Field>
                <FieldLabel>Name</FieldLabel>
                <TextEdit Placeholder="Enter project name..." @bind-Text="newProject.Name" />
            </Blazorise.Field>
            <Blazorise.Field>
                <FieldLabel>Description</FieldLabel>
                <TextEdit Placeholder="Enter project description..." @bind-Text="newProject.Description" />
            </Blazorise.Field>

            @*  <Blazorise.Field>
            @if (selectedUsers.Any())
            {
            <FieldLabel>Users</FieldLabel>
            <Blazorise.Select TValue="bool">
            @for (int i = 0; i < users.Count; i++)
            {
            <Blazorise.SelectItem>

            </Blazorise.SelectItem>
            }
            </Blazorise.Select>
            }
            </Blazorise.Field> *@
            @*   <Blazorise.Field>
            @if (users.Any())
            {
            <Blazorise.FieldLabel>Users</Blazorise.FieldLabel>
            <Blazorise.Dropdown>
            <Blazorise.DropdownToggle Color="Color.Primary">Select Users</Blazorise.DropdownToggle>
            <Blazorise.DropdownMenu>
            @foreach (var user in users)
            {
            <Blazorise.DropdownItem>
            <Checkbox @bind="selectedUsers[users.IndexOf(user)]" />
            @user.FirstName @user.LastName
            </Blazorise.DropdownItem>
            }
            </Blazorise.DropdownMenu>
            </Blazorise.Dropdown>
            }
            </Blazorise.Field> *@
          @*   <Blazorise.Dropdown>
                <Blazorise.DropdownToggle Color="Color.Primary">
                    Dropdown With Checkboxes
                </Blazorise.DropdownToggle>
                <Blazorise.DropdownMenu>
                    @foreach (var user in users)
            {
                        <Blazorise.DropdownItem ShowCheckbox @onclick="() => UpdateSelectedUsers(user.Id, !selectedUsers[users.IndexOf(user)])">
                        @user.FirstName @user.LastName
                    </Blazorise.DropdownItem>
            }
                </Blazorise.DropdownMenu>
            </Blazorise.Dropdown> *@
            <Blazorise.Field>
                <FieldLabel>Search</FieldLabel>
                <TextEdit Placeholder="Search by name or surname..." @bind-Text="searchText" @onchange="FilterUsers" />
            </Blazorise.Field>

            @if (!string.IsNullOrEmpty(searchText))
            {
                <div class="search-results">
                    @foreach (var user in filteredUsers)
                    {
                        <div class="search-result" @onclick="() => ToggleUserSelection(user)">
                            @user.FirstName @user.LastName
                        </div>
                    }
                </div>
            }

            @if (selectedFilteredUsers.Any())
            {
                <div>
                    <h4>Selected Users:</h4>
                    @foreach (var user in selectedFilteredUsers)
                    {
                        <p>@user.FirstName @user.LastName</p>
                    }
                </div>
            }


        </Blazorise.ModalBody>
        <ModalFooter>
            <Blazorise.Button Color="Color.Secondary" Clicked="@HideModal">Close</Blazorise.Button>
            <Blazorise.Button Color="Color.Primary" Clicked="@CreateProject">Save Changes</Blazorise.Button>
        </ModalFooter>
    </Blazorise.ModalContent>
</Blazorise.Modal>


<TabBlazor.Card>
    @foreach (var project in projects)
            {
    <TabBlazor.CardBody class="my-card-body" @onclick="() => ProjectClick(project.Id)">
        <TabBlazor.CardTitle>
            <h3>@project.Name</h3>
        </TabBlazor.CardTitle>
        @project.Description
    </TabBlazor.CardBody>
            }
</TabBlazor.Card>

@code {
    [Parameter]
    public string userName { get; set; }

    private List<Project> projects = new List<Project>();

    private List<User> users = new List<User>();

    private List<bool> selectedUsers = new List<bool>();

    private List<User> filteredUsers = new List<User>();
    private List<User> selectedFilteredUsers = new List<User>();


    private Project newProject = new Project();
    private string searchText = "";

    protected override async void OnInitialized()
    {
        await Refresh();
    }

    private async Task Refresh()
    {
        projects = await client.GetFromJsonAsync<List<Project>>($"/api/project/GetUserProjects/?userName={userName}");
        users = await client.GetFromJsonAsync<List<User>>("api/account/GetAllUsers");//await client.GetFromJsonAsync<List<User>>($"/api/project/GetProjectAsigneeUsers?projectId={}");
       
        // selectedUsers.AddRange(new bool[users.Count]);
        selectedUsers = new List<bool>(new bool[users.Count]);
        FilterUsers();
        StateHasChanged();
    }

    private void ProjectClick(Guid id)
    {
        navigate.NavigateTo($"/projectInfo/{id}");
    }

    private Modal modalRef;

    private Task ShowModal()
    {
        return modalRef.Show();
    }

    private Task HideModal()
    {
        return modalRef.Hide();
    }
    // private void UpdateSelectedUsers(Guid userId, bool isChecked)
    // {
    //     var index = users.FindIndex(u => u.Id == userId);
    //     if (index >= 0)
    //     {
    //         selectedUsers[index] = isChecked;
    //     }
    // }
    private void ToggleUserSelection(User user)
    {
        var index = selectedFilteredUsers.FindIndex(u => u.Id == user.Id);
        if (index >= 0)
        {
            selectedFilteredUsers.RemoveAt(index);
        }
        else
        {
            selectedFilteredUsers.Add(user);
        }
    }
    private void FilterUsers()
    {
        if (string.IsNullOrWhiteSpace(searchText))
        {
            filteredUsers = new List<User>(); // Очищаем список при отсутствии текста
        }
        else
        {
            filteredUsers = users.Where(u =>
                searchText.ToLower().All(term =>
                    u.FirstName.ToLower().Contains(term) ||
                    u.LastName.ToLower().Contains(term)
                )
            ).ToList();
        }
    }




    private async Task CreateProject()
    {
        var asigneeList = new List<ProjectAsignee>();
        @for (int i = 0; i < selectedUsers.Count; i++)
        {
            if (selectedUsers[i])
            {
                asigneeList.Add(new ProjectAsignee() { UserId = users[i].Id, ProjectId = newProject.Id });
            }
        }
        var pj = new ProjectsAsignees()
            {
                Project = newProject,
                ProjectAsignees = asigneeList,
                UserName = userName
            };
        await client.PostAsJsonAsync("api/Project/AddProject", pj);

        newProject = new Project();

        await Refresh();
        await HideModal();
    }
}
<style>
    .card-body:hover {
        background-color: darkcyan !important;
    }
</style>