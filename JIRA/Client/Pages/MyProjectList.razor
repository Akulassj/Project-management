@page "/projects/{userName}"
@using TabBlazor.Services
@using Blazorise
@inject HttpClient client
@inject NavigationManager navigate
@inject Blazorise.IModalService ModalService

<h3>MyProjectList</h3>
@* <Button class="mb-2" @onclick="ShowModal" BackgroundColor="TablerColor.Green" Shape="ButtonShape.Pill">Create new project</Button> *@

<Blazorise.Button Color="Color.Success" Clicked="@ShowModal">Create project</Blazorise.Button>

<Blazorise.Modal @ref="modalRef">
    <Blazorise.ModalContent Centered>
        <Blazorise.ModalHeader>
            <ModalTitle>Create project</ModalTitle>
            <CloseButton />
        </Blazorise.ModalHeader>
        <Blazorise.ModalBody>
            <Blazorise.Field>
                <FieldLabel>Name</FieldLabel>
                <TextEdit Placeholder="Enter project name..." @bind-Text="newProject.Name" />
            </Blazorise.Field>
            <Blazorise.Field>
                <FieldLabel>Description</FieldLabel>
                <TextEdit Placeholder="Enter project description..." @bind-Text="newProject.Description" />
            </Blazorise.Field>

          <Blazorise.Field>
                <Blazorise.FieldLabel>Search</Blazorise.FieldLabel>
                <Blazorise.TextEdit Placeholder="Search by name or surname..." @bind-Text="searchText" @onchange="GetUsersSearch" />
            </Blazorise.Field>

            @if (users != null)
            {
                <div class="search-results">
                    @foreach (var user in users)
                    {
                        <div class="search-result" @onclick="() => AddUser(user)">
                           @user.UserName
                        </div>
                    }
                </div>
            }

            @if (selectedUsers.Any())
            {
                <div>
                    <h4>Selected Users:</h4>
                    @foreach (var user in selectedUsers)
                    {
                        <div>
                            <p>@user.UserName</p>
                            <Blazorise.Button Color="Color.Danger" Clicked="() => RemoveUser(user)">Remove</Blazorise.Button>
                        </div>
                    }
                </div>
            }


        </Blazorise.ModalBody>
        <ModalFooter>
            <Blazorise.Button Color="Color.Secondary" Clicked="@HideModal">Close</Blazorise.Button>
            <Blazorise.Button Color="Color.Primary" Clicked="@CreateProject">Save Changes</Blazorise.Button>
        </ModalFooter>
    </Blazorise.ModalContent>
</Blazorise.Modal>


<TabBlazor.Card>
    @foreach (var project in projects)
            {
    <TabBlazor.CardBody class="my-card-body" @onclick="() => ProjectClick(project.Id)">
        <TabBlazor.CardTitle>
            <h3>@project.Name</h3>
        </TabBlazor.CardTitle>
        @project.Description
    </TabBlazor.CardBody>
            }
</TabBlazor.Card>

@code {
    [Parameter]
    public string userName { get; set; }

    private List<Project> projects = new List<Project>();
    private List<User> users;
    private List<User> selectedUsers = new List<User>();
    private Project newProject = new Project();
    private string searchText = string.Empty;

    protected override async void OnInitialized()
    {
        await Refresh();
    }

    private async Task Refresh()
    {
        projects = await client.GetFromJsonAsync<List<Project>>($"/api/project/GetUserProjects/?userName={userName}");
        //users = await client.GetFromJsonAsync<List<User>>("api/account/GetAllUsers");
        //await client.GetFromJsonAsync<List<User>>($"/api/project/GetProjectAsigneeUsers?projectId={}");




        StateHasChanged();
    }

    private void ProjectClick(Guid id)
    {
        navigate.NavigateTo($"/projectInfo/{id}");
    }

    private Modal modalRef;

    private Task ShowModal()
    {
        return modalRef.Show();
    }

    private Task HideModal()
    {
        return modalRef.Hide();
    }

    private async Task GetUsersSearch()
    {
        if (!string.IsNullOrWhiteSpace(searchText))
        {
            // Отправить запрос на сервер для поиска пользователей
            users = await client.GetFromJsonAsync<List<User>>($"api/project/SearchUsers?username={searchText}");
            
        }
        else
        {
            users = null;
            selectedUsers = new List<User>();
        }
    }

    private void AddUser(User user)
    {
        if (!selectedUsers.Contains(user))
        {
            selectedUsers.Add(user);
        }
    }

    private void RemoveUser(User user)
    {
        selectedUsers.Remove(user);
    }



    private async Task CreateProject()
    {
        var asigneeList = new List<ProjectAsignee>();
        foreach (var user in selectedUsers)
        {
            asigneeList.Add(new ProjectAsignee() { UserId = user.Id, ProjectId = newProject.Id });
        }

        var pj = new ProjectsAsigneeViewModel()
            {
                Project = newProject,
                ProjectAsignees = asigneeList,
                UserName = userName
            };

        await client.PostAsJsonAsync("api/Project/AddProject", pj);

        newProject = new Project();
        searchText = ""; 
        selectedUsers.Clear(); 
        users.Clear();
        await Refresh();
        await HideModal();
    }

}
<style>
    .card-body:hover {
        background-color: darkcyan !important;
    }
</style>