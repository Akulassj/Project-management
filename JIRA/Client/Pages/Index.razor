@page "/"
@using JIRA.Shared.Entity
@using TabBlazor
@using MatBlazor
@using System
@using System.Collections.Generic
@inject HttpClient HttpClient
@using ApexCharts

<Tabs>
    <Tab Title="Главная" Icon="home">
        <div class="container">
            <div class="row">
                <div class="col-md-12 text-center">
                    <!-- Информация о проекте -->
                    <h3>Информация о проекте</h3>
                    <p>Название проекта: @CurrentProject.Name</p>
                    <p>Описание проекта: @CurrentProject.Description</p>
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <!-- Информация о заданиях -->
                    <h3>Информация о заданиях</h3>
                    <p>Количество заданий: @Tasks.Count()</p>
                    <!-- Здесь может быть другая информация о заданиях -->
                </div>
                <div class="col-md-6">
                    <!-- Календарь -->
                    <h3>Календарь</h3>

                    <Datepicker @bind-SelectedDate="SelectedDate" Label="Выберите дату" />

                    <!-- Отображение заданий для выбранной даты -->
                    @if (SelectedDateTasks != null && SelectedDateTasks.Any())
                    {
                        <h4>Задания на @SelectedDate.ToString("d"):</h4>
                        <ul>
                            @foreach (var task in SelectedDateTasks)
                            {
                                <li>@task.Name</li>
                            }
                        </ul>
                    }
                    else
                    {
                        <p>На @SelectedDate.ToString("d") заданий нет.</p>
                    }
                </div>
            </div>
            <div class="row">
                <div class="col-md-6">
                    <!-- Графики -->
                    <h3>Графики</h3>
                    <div class="row">
                        <div class="col-md-12">
                            <!-- Диаграмма выполненных/невыполненных/в разработке задач -->
                          
                            {
                                <h4>Задания в проекте</h4>

                               @*  <ApexChart Options="@BarChartOptions" Type="ChartType.Bar" Height="400">
                                    <ApexTitle Text="Статусы заданий в проекте"></ApexTitle>
                                    <ApexXAxis Categories="@JobStatusCategories"></ApexXAxis>
                                    <ApexSeries Data="@JobCountData"></ApexSeries>
                                </ApexChart> *@
                            }



                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <!-- Список участников заданий -->
                    <h3>Участники заданий</h3>
                    <ul>
                        @foreach (var assignee in TaskAssignees)
                        {
                            <li>@assignee.User.FirstName @assignee.User.LastName</li>
                        }
                    </ul>
                </div>
            </div>
        </div>
    </Tab>
    <Tab Title="Другая вкладка" Icon="other-icon">
        <!-- Содержимое другой вкладки -->
    </Tab>
    <!-- Добавьте другие вкладки здесь с аналогичным содержимым и иконками -->
</Tabs>

@code {
    private DateTimeOffset SelectedDate = DateTimeOffset.Now.Date;
    private List<Job> Tasks = new List<Job>(); // Предположим, что у вас есть список заданий
    private List<Job> SelectedDateTasks => Tasks.Where(t => t.CreatedAt.Date == SelectedDate.Date).ToList();
    private Project CurrentProject = new Project { Name = "Проект", Description = "Описание проекта" };
    // private ApexCharts.ApexChartOptions <BarChartOptions;
    // Предположим, что у вас есть классы TaskAssignee, Project и User:
    private List<TaskAssignee> TaskAssignees = new List<TaskAssignee>(); // Предположим, что у вас есть список участников заданий
    private List<string> TaskStatusLabels = new List<string> { "Выполнено", "В разработке", "Не выполнено" };
    // private List<int> TaskStatusData
    // {
    //     get
    //     {
    //         int completedTasks = Tasks.Count(t => t.Status == "Выполнено");
    //         int inProgressTasks = Tasks.Count(t => t.Status == "В разработке");
    //         int notCompletedTasks = Tasks.Count(t => t.Status == "Не выполнено");
    //         return new List<int> { completedTasks, inProgressTasks, notCompletedTasks };
    //     }
    // }
    [Parameter]
    public Project Project { get; set; }

    private List<Job> Jobs { get; set; }
    private List<string> JobStatusCategories { get; set; }
    private List<int> JobCountData { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Jobs = await GetJobsByProjectId(Project.Id);

        if (Jobs != null && Jobs.Any())
        {
            JobStatusCategories = Jobs.Select(j => j.Status).Distinct().ToList();
            JobCountData = JobStatusCategories.Select(status => Jobs.Count(j => j.Status == status)).ToList();
        }
    }

    private async Task<List<Job>> GetJobsByProjectId(Guid projectId)
    {
        var response = await HttpClient.GetAsync($"api/Project/{projectId}/jobs");
        response.EnsureSuccessStatusCode();
        return await response.Content.ReadFromJsonAsync<List<Job>>();
    }
    // Для примера:
    // public class Job
    // {
    //     public string Name { get; set; }
    //     public string Description { get; set; }
    //     public DateTime CreatedAt { get; set; }
    // }
    //
    // public class Project
    // {
    //     public string Name { get; set; }
    //     public string Description { get; set; }
    // }
    //
    // public class TaskAssignee
    // {
    //     public User User { get; set; }
    // }
    //
    // public class User
    // {
    //     public string FirstName { get; set; }
    //     public string LastName { get; set; }
    // }

}
